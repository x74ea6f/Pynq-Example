// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_strm_core_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V_dout,
        a_V_empty_n,
        a_V_read,
        c_V_din,
        c_V_full_n,
        c_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state10 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] a_V_dout;
input   a_V_empty_n;
output   a_V_read;
output  [15:0] c_V_din;
input   c_V_full_n;
output   c_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_V_read;
reg c_V_write;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] b3_address0;
reg    b3_ce0;
wire   [4:0] b3_q0;
wire   [9:0] W3_address0;
reg    W3_ce0;
wire   [7:0] W3_q0;
reg    a_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln48_reg_387;
reg    c_V_blk_n;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln56_1_reg_445;
reg   [0:0] icmp_ln56_1_reg_445_pp1_iter3_reg;
reg   [6:0] i_0_reg_171;
reg   [9:0] indvar_flatten_reg_183;
reg   [3:0] i1_0_reg_194;
reg   [22:0] t_0_reg_205;
reg   [6:0] k_0_reg_217;
wire   [0:0] icmp_ln48_fu_228_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [6:0] i_fu_234_p2;
reg   [6:0] i_reg_391;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln53_fu_245_p2;
reg   [0:0] icmp_ln53_reg_396;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
wire    ap_block_state8_pp1_stage0_iter3;
reg    ap_block_state9_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln53_reg_396_pp1_iter1_reg;
reg   [0:0] icmp_ln53_reg_396_pp1_iter2_reg;
reg   [0:0] icmp_ln53_reg_396_pp1_iter3_reg;
wire   [9:0] add_ln53_fu_251_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln56_fu_263_p2;
reg   [0:0] icmp_ln56_reg_405;
reg   [0:0] icmp_ln56_reg_405_pp1_iter1_reg;
reg   [0:0] icmp_ln56_reg_405_pp1_iter2_reg;
wire   [6:0] select_ln58_1_fu_269_p3;
reg   [6:0] select_ln58_1_reg_410;
reg   [6:0] select_ln58_1_reg_410_pp1_iter1_reg;
wire   [3:0] select_ln58_2_fu_277_p3;
reg   [3:0] select_ln58_2_reg_417;
reg   [3:0] select_ln58_2_reg_417_pp1_iter1_reg;
wire   [6:0] k_fu_285_p2;
reg   [6:0] k_reg_424;
reg   [6:0] k_reg_424_pp1_iter1_reg;
reg  signed [7:0] W3_load_reg_440;
wire   [0:0] icmp_ln56_1_fu_341_p2;
wire  signed [22:0] grp_fu_379_p3;
reg  signed [22:0] t_reg_454;
reg    ap_enable_reg_pp1_iter3;
reg   [4:0] b3_load_reg_460;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg   [6:0] buf_address0;
reg    buf_ce0;
reg    buf_we0;
wire   [7:0] buf_q0;
reg   [6:0] ap_phi_mux_i_0_phi_fu_175_p4;
reg   [3:0] ap_phi_mux_i1_0_phi_fu_198_p4;
reg   [22:0] ap_phi_mux_t_0_phi_fu_209_p4;
reg   [6:0] ap_phi_mux_k_0_phi_fu_221_p4;
wire   [63:0] zext_ln50_fu_240_p1;
wire   [63:0] zext_ln58_5_fu_328_p1;
wire   [63:0] zext_ln58_1_fu_337_p1;
wire   [63:0] zext_ln58_fu_333_p1;
reg    ap_block_pp1_stage0_01001;
wire   [3:0] i_2_fu_257_p2;
wire   [9:0] tmp_6_fu_294_p3;
wire   [7:0] tmp_7_fu_305_p3;
wire   [10:0] zext_ln58_3_fu_312_p1;
wire   [10:0] zext_ln58_2_fu_301_p1;
wire   [10:0] add_ln58_fu_316_p2;
wire   [10:0] zext_ln56_fu_291_p1;
wire   [10:0] add_ln58_1_fu_322_p2;
wire   [15:0] trunc_ln_fu_360_p4;
wire  signed [15:0] sext_ln61_fu_369_p1;
wire   [7:0] grp_fu_379_p1;
wire   [22:0] grp_fu_379_p2;
wire    ap_CS_fsm_state10;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [15:0] grp_fu_379_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

dense_strm_core_2hbi #(
    .DataWidth( 5 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
b3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b3_address0),
    .ce0(b3_ce0),
    .q0(b3_q0)
);

dense_strm_core_2ibs #(
    .DataWidth( 8 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
W3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W3_address0),
    .ce0(W3_ce0),
    .q0(W3_q0)
);

dense_strm_core_2jbC #(
    .DataWidth( 8 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_address0),
    .ce0(buf_ce0),
    .we0(buf_we0),
    .d0(a_V_dout),
    .q0(buf_q0)
);

nn_mac_muladd_8s_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
nn_mac_muladd_8s_kbM_U17(
    .din0(W3_load_reg_440),
    .din1(grp_fu_379_p1),
    .din2(grp_fu_379_p2),
    .dout(grp_fu_379_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state5)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_194 <= 4'd0;
    end else if (((icmp_ln53_reg_396 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i1_0_reg_194 <= select_ln58_2_reg_417;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln48_reg_387 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_171 <= i_reg_391;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_171 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_183 <= 10'd0;
    end else if (((icmp_ln53_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten_reg_183 <= add_ln53_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_0_reg_217 <= 7'd0;
    end else if (((icmp_ln53_reg_396 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        k_0_reg_217 <= k_reg_424;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_0_reg_205 <= 23'd0;
    end else if (((icmp_ln53_reg_396_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t_0_reg_205 <= t_reg_454;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_reg_396_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        W3_load_reg_440 <= W3_q0;
        icmp_ln56_1_reg_445 <= icmp_ln56_1_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_1_reg_445 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b3_load_reg_460 <= b3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_391 <= i_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln48_reg_387 <= icmp_ln48_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln53_reg_396 <= icmp_ln53_fu_245_p2;
        icmp_ln53_reg_396_pp1_iter1_reg <= icmp_ln53_reg_396;
        icmp_ln56_reg_405_pp1_iter1_reg <= icmp_ln56_reg_405;
        k_reg_424_pp1_iter1_reg <= k_reg_424;
        select_ln58_1_reg_410_pp1_iter1_reg <= select_ln58_1_reg_410;
        select_ln58_2_reg_417_pp1_iter1_reg <= select_ln58_2_reg_417;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln53_reg_396_pp1_iter2_reg <= icmp_ln53_reg_396_pp1_iter1_reg;
        icmp_ln53_reg_396_pp1_iter3_reg <= icmp_ln53_reg_396_pp1_iter2_reg;
        icmp_ln56_1_reg_445_pp1_iter3_reg <= icmp_ln56_1_reg_445;
        icmp_ln56_reg_405_pp1_iter2_reg <= icmp_ln56_reg_405_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln56_reg_405 <= icmp_ln56_fu_263_p2;
        select_ln58_1_reg_410 <= select_ln58_1_fu_269_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        k_reg_424 <= k_fu_285_p2;
        select_ln58_2_reg_417 <= select_ln58_2_fu_277_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_reg_396_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t_reg_454 <= grp_fu_379_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        W3_ce0 = 1'b1;
    end else begin
        W3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_387 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_V_blk_n = a_V_empty_n;
    end else begin
        a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln48_reg_387 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_V_read = 1'b1;
    end else begin
        a_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln48_fu_228_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln53_fu_245_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln53_reg_396 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i1_0_phi_fu_198_p4 = select_ln58_2_reg_417;
    end else begin
        ap_phi_mux_i1_0_phi_fu_198_p4 = i1_0_reg_194;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_387 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_175_p4 = i_reg_391;
    end else begin
        ap_phi_mux_i_0_phi_fu_175_p4 = i_0_reg_171;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln53_reg_396 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_k_0_phi_fu_221_p4 = k_reg_424;
    end else begin
        ap_phi_mux_k_0_phi_fu_221_p4 = k_0_reg_217;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln53_reg_396_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ap_phi_mux_t_0_phi_fu_209_p4 = t_reg_454;
    end else begin
        ap_phi_mux_t_0_phi_fu_209_p4 = t_0_reg_205;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b3_ce0 = 1'b1;
    end else begin
        b3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buf_address0 = zext_ln58_1_fu_337_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_address0 = zext_ln50_fu_240_p1;
    end else begin
        buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        buf_ce0 = 1'b1;
    end else begin
        buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln48_reg_387 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_we0 = 1'b1;
    end else begin
        buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_1_reg_445_pp1_iter3_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        c_V_blk_n = c_V_full_n;
    end else begin
        c_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln56_1_reg_445_pp1_iter3_reg == 1'd1) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        c_V_write = 1'b1;
    end else begin
        c_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln48_fu_228_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln48_fu_228_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln53_fu_245_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)) | ((icmp_ln53_fu_245_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W3_address0 = zext_ln58_5_fu_328_p1;

assign add_ln53_fu_251_p2 = (indvar_flatten_reg_183 + 10'd1);

assign add_ln58_1_fu_322_p2 = (add_ln58_fu_316_p2 + zext_ln56_fu_291_p1);

assign add_ln58_fu_316_p2 = (zext_ln58_3_fu_312_p1 + zext_ln58_2_fu_301_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln48_reg_387 == 1'd0) & (1'b0 == a_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln48_reg_387 == 1'd0) & (1'b0 == a_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((icmp_ln56_1_reg_445_pp1_iter3_reg == 1'd1) & (c_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln56_1_reg_445_pp1_iter3_reg == 1'd1) & (c_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln56_1_reg_445_pp1_iter3_reg == 1'd1) & (c_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln48_reg_387 == 1'd0) & (1'b0 == a_V_empty_n));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp1_stage0_iter4 = ((icmp_ln56_1_reg_445_pp1_iter3_reg == 1'd1) & (c_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign b3_address0 = zext_ln58_fu_333_p1;

assign c_V_din = ($signed(trunc_ln_fu_360_p4) + $signed(sext_ln61_fu_369_p1));

assign grp_fu_379_p1 = grp_fu_379_p10;

assign grp_fu_379_p10 = buf_q0;

assign grp_fu_379_p2 = ((icmp_ln56_reg_405_pp1_iter2_reg[0:0] === 1'b1) ? 23'd0 : ap_phi_mux_t_0_phi_fu_209_p4);

assign i_2_fu_257_p2 = (ap_phi_mux_i1_0_phi_fu_198_p4 + 4'd1);

assign i_fu_234_p2 = (ap_phi_mux_i_0_phi_fu_175_p4 + 7'd1);

assign icmp_ln48_fu_228_p2 = ((ap_phi_mux_i_0_phi_fu_175_p4 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_245_p2 = ((indvar_flatten_reg_183 == 10'd1000) ? 1'b1 : 1'b0);

assign icmp_ln56_1_fu_341_p2 = ((k_reg_424_pp1_iter1_reg == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_263_p2 = ((ap_phi_mux_k_0_phi_fu_221_p4 == 7'd100) ? 1'b1 : 1'b0);

assign k_fu_285_p2 = (select_ln58_1_fu_269_p3 + 7'd1);

assign select_ln58_1_fu_269_p3 = ((icmp_ln56_fu_263_p2[0:0] === 1'b1) ? 7'd0 : ap_phi_mux_k_0_phi_fu_221_p4);

assign select_ln58_2_fu_277_p3 = ((icmp_ln56_fu_263_p2[0:0] === 1'b1) ? i_2_fu_257_p2 : ap_phi_mux_i1_0_phi_fu_198_p4);

assign sext_ln61_fu_369_p1 = $signed(b3_load_reg_460);

assign tmp_6_fu_294_p3 = {{select_ln58_1_reg_410}, {3'd0}};

assign tmp_7_fu_305_p3 = {{select_ln58_1_reg_410}, {1'd0}};

assign trunc_ln_fu_360_p4 = {{t_reg_454[22:7]}};

assign zext_ln50_fu_240_p1 = i_0_reg_171;

assign zext_ln56_fu_291_p1 = select_ln58_2_reg_417;

assign zext_ln58_1_fu_337_p1 = select_ln58_1_reg_410_pp1_iter1_reg;

assign zext_ln58_2_fu_301_p1 = tmp_6_fu_294_p3;

assign zext_ln58_3_fu_312_p1 = tmp_7_fu_305_p3;

assign zext_ln58_5_fu_328_p1 = add_ln58_1_fu_322_p2;

assign zext_ln58_fu_333_p1 = select_ln58_2_reg_417_pp1_iter1_reg;

endmodule //dense_strm_core_2
