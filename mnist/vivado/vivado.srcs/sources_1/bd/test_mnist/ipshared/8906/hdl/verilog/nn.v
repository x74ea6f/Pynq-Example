// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nn,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=46781,HLS_SYN_TPT=none,HLS_SYN_MEM=37,HLS_SYN_DSP=4,HLS_SYN_FF=1047,HLS_SYN_LUT=1925,HLS_VERSION=2020_1}" *)

module nn (
        ap_clk,
        ap_rst_n,
        a_V_TDATA,
        a_V_TVALID,
        a_V_TREADY,
        z_V_TDATA,
        z_V_TVALID,
        z_V_TREADY,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] a_V_TDATA;
input   a_V_TVALID;
output   a_V_TREADY;
output  [7:0] z_V_TDATA;
output   z_V_TVALID;
input   z_V_TREADY;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg a_V_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [5:0] i_fu_296_p2;
reg   [5:0] i_reg_523;
wire    ap_CS_fsm_state4;
wire   [15:0] c0_V_dout;
wire    c0_V_empty_n;
reg    c0_V_read;
wire   [0:0] icmp_ln46_fu_290_p2;
reg    ap_block_state4;
wire   [7:0] clip_v_fu_382_p3;
reg   [7:0] clip_v_reg_528;
wire   [6:0] i_1_fu_396_p2;
reg   [6:0] i_1_reg_536;
wire    ap_CS_fsm_state7;
wire   [15:0] c1_V_dout;
wire    c1_V_empty_n;
reg    c1_V_read;
wire   [0:0] icmp_ln46_1_fu_390_p2;
reg    ap_block_state7;
wire   [7:0] clip_v_1_fu_482_p3;
reg   [7:0] clip_v_1_reg_541;
wire    grp_dense_strm_core_fu_252_ap_start;
wire    grp_dense_strm_core_fu_252_ap_done;
wire    grp_dense_strm_core_fu_252_ap_idle;
wire    grp_dense_strm_core_fu_252_ap_ready;
wire    grp_dense_strm_core_fu_252_a_V_TREADY;
wire   [15:0] grp_dense_strm_core_fu_252_c_V_din;
wire    grp_dense_strm_core_fu_252_c_V_write;
wire    grp_dense_strm_core_2_fu_263_ap_start;
wire    grp_dense_strm_core_2_fu_263_ap_done;
wire    grp_dense_strm_core_2_fu_263_ap_idle;
wire    grp_dense_strm_core_2_fu_263_ap_ready;
wire    grp_dense_strm_core_2_fu_263_a_V_read;
wire   [15:0] grp_dense_strm_core_2_fu_263_c_V_din;
wire    grp_dense_strm_core_2_fu_263_c_V_write;
wire    grp_dense_strm_core_1_fu_273_ap_start;
wire    grp_dense_strm_core_1_fu_273_ap_done;
wire    grp_dense_strm_core_1_fu_273_ap_idle;
wire    grp_dense_strm_core_1_fu_273_ap_ready;
wire    grp_dense_strm_core_1_fu_273_a_V_read;
wire   [15:0] grp_dense_strm_core_1_fu_273_c_V_din;
wire    grp_dense_strm_core_1_fu_273_c_V_write;
wire    grp_argmax_strm_core_fu_283_ap_start;
wire    grp_argmax_strm_core_fu_283_ap_done;
wire    grp_argmax_strm_core_fu_283_ap_idle;
wire    grp_argmax_strm_core_fu_283_ap_ready;
wire    grp_argmax_strm_core_fu_283_a_V_read;
wire   [7:0] grp_argmax_strm_core_fu_283_b_V_TDATA;
wire    grp_argmax_strm_core_fu_283_b_V_TVALID;
wire    grp_argmax_strm_core_fu_283_b_V_TREADY;
reg   [5:0] i_0_i_reg_230;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    d0_V_full_n;
reg    d0_V_write;
reg   [6:0] i_0_i2_reg_241;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    d1_V_full_n;
reg    d1_V_write;
reg    grp_dense_strm_core_fu_252_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    c0_V_full_n;
reg    c0_V_write;
reg    grp_dense_strm_core_2_fu_263_ap_start_reg;
reg    ap_block_state7_ignore_call0;
wire   [7:0] d1_V_dout;
wire    d1_V_empty_n;
reg    d1_V_read;
wire    ap_CS_fsm_state9;
wire    c2_V_full_n;
reg    c2_V_write;
reg    grp_dense_strm_core_1_fu_273_ap_start_reg;
reg    ap_block_state4_ignore_call0;
wire   [7:0] d0_V_dout;
wire    d0_V_empty_n;
reg    d0_V_read;
wire    c1_V_full_n;
reg    c1_V_write;
reg    grp_argmax_strm_core_fu_283_ap_start_reg;
wire    ap_CS_fsm_state10;
wire   [15:0] c2_V_dout;
wire    c2_V_empty_n;
reg    c2_V_read;
wire    ap_CS_fsm_state11;
wire   [13:0] trunc_ln_fu_302_p4;
wire  signed [14:0] sext_ln48_fu_312_p1;
wire   [14:0] add_ln48_fu_326_p2;
wire   [6:0] tmp_1_fu_340_p4;
wire   [7:0] trunc_ln48_1_fu_316_p4;
wire   [0:0] tmp_fu_332_p3;
wire   [0:0] xor_ln19_fu_362_p2;
wire   [0:0] icmp_ln21_fu_350_p2;
wire   [0:0] or_ln19_fu_376_p2;
wire   [7:0] select_ln19_fu_368_p3;
wire   [7:0] xor_ln24_fu_356_p2;
wire   [13:0] trunc_ln48_2_fu_402_p4;
wire  signed [14:0] sext_ln48_1_fu_412_p1;
wire   [14:0] add_ln48_1_fu_426_p2;
wire   [6:0] tmp_5_fu_440_p4;
wire   [7:0] trunc_ln48_3_fu_416_p4;
wire   [0:0] tmp_4_fu_432_p3;
wire   [0:0] xor_ln19_1_fu_462_p2;
wire   [0:0] icmp_ln21_1_fu_450_p2;
wire   [0:0] or_ln19_1_fu_476_p2;
wire   [7:0] select_ln19_2_fu_468_p3;
wire   [7:0] xor_ln24_1_fu_456_p2;
wire    ap_CS_fsm_state12;
wire    regslice_both_z_V_U_apdone_blk;
reg   [11:0] ap_NS_fsm;
wire    regslice_both_a_V_U_apdone_blk;
wire   [7:0] a_V_TDATA_int;
wire    a_V_TVALID_int;
reg    a_V_TREADY_int;
wire    regslice_both_a_V_U_ack_in;
wire    z_V_TREADY_int;
wire    regslice_both_z_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 grp_dense_strm_core_fu_252_ap_start_reg = 1'b0;
#0 grp_dense_strm_core_2_fu_263_ap_start_reg = 1'b0;
#0 grp_dense_strm_core_1_fu_273_ap_start_reg = 1'b0;
#0 grp_argmax_strm_core_fu_283_ap_start_reg = 1'b0;
end

nn_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
nn_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

dense_strm_core grp_dense_strm_core_fu_252(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dense_strm_core_fu_252_ap_start),
    .ap_done(grp_dense_strm_core_fu_252_ap_done),
    .ap_idle(grp_dense_strm_core_fu_252_ap_idle),
    .ap_ready(grp_dense_strm_core_fu_252_ap_ready),
    .a_V_TDATA(a_V_TDATA_int),
    .a_V_TVALID(a_V_TVALID_int),
    .a_V_TREADY(grp_dense_strm_core_fu_252_a_V_TREADY),
    .c_V_din(grp_dense_strm_core_fu_252_c_V_din),
    .c_V_full_n(c0_V_full_n),
    .c_V_write(grp_dense_strm_core_fu_252_c_V_write)
);

dense_strm_core_2 grp_dense_strm_core_2_fu_263(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dense_strm_core_2_fu_263_ap_start),
    .ap_done(grp_dense_strm_core_2_fu_263_ap_done),
    .ap_idle(grp_dense_strm_core_2_fu_263_ap_idle),
    .ap_ready(grp_dense_strm_core_2_fu_263_ap_ready),
    .a_V_dout(d1_V_dout),
    .a_V_empty_n(d1_V_empty_n),
    .a_V_read(grp_dense_strm_core_2_fu_263_a_V_read),
    .c_V_din(grp_dense_strm_core_2_fu_263_c_V_din),
    .c_V_full_n(c2_V_full_n),
    .c_V_write(grp_dense_strm_core_2_fu_263_c_V_write)
);

dense_strm_core_1 grp_dense_strm_core_1_fu_273(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dense_strm_core_1_fu_273_ap_start),
    .ap_done(grp_dense_strm_core_1_fu_273_ap_done),
    .ap_idle(grp_dense_strm_core_1_fu_273_ap_idle),
    .ap_ready(grp_dense_strm_core_1_fu_273_ap_ready),
    .a_V_dout(d0_V_dout),
    .a_V_empty_n(d0_V_empty_n),
    .a_V_read(grp_dense_strm_core_1_fu_273_a_V_read),
    .c_V_din(grp_dense_strm_core_1_fu_273_c_V_din),
    .c_V_full_n(c1_V_full_n),
    .c_V_write(grp_dense_strm_core_1_fu_273_c_V_write)
);

argmax_strm_core grp_argmax_strm_core_fu_283(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_argmax_strm_core_fu_283_ap_start),
    .ap_done(grp_argmax_strm_core_fu_283_ap_done),
    .ap_idle(grp_argmax_strm_core_fu_283_ap_idle),
    .ap_ready(grp_argmax_strm_core_fu_283_ap_ready),
    .a_V_dout(c2_V_dout),
    .a_V_empty_n(c2_V_empty_n),
    .a_V_read(grp_argmax_strm_core_fu_283_a_V_read),
    .b_V_TDATA(grp_argmax_strm_core_fu_283_b_V_TDATA),
    .b_V_TVALID(grp_argmax_strm_core_fu_283_b_V_TVALID),
    .b_V_TREADY(grp_argmax_strm_core_fu_283_b_V_TREADY)
);

fifo_w16_d50_A c0_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_dense_strm_core_fu_252_c_V_din),
    .if_full_n(c0_V_full_n),
    .if_write(c0_V_write),
    .if_dout(c0_V_dout),
    .if_empty_n(c0_V_empty_n),
    .if_read(c0_V_read)
);

fifo_w8_d50_A d0_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(clip_v_reg_528),
    .if_full_n(d0_V_full_n),
    .if_write(d0_V_write),
    .if_dout(d0_V_dout),
    .if_empty_n(d0_V_empty_n),
    .if_read(d0_V_read)
);

fifo_w16_d100_A c1_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_dense_strm_core_1_fu_273_c_V_din),
    .if_full_n(c1_V_full_n),
    .if_write(c1_V_write),
    .if_dout(c1_V_dout),
    .if_empty_n(c1_V_empty_n),
    .if_read(c1_V_read)
);

fifo_w8_d100_A d1_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(clip_v_1_reg_541),
    .if_full_n(d1_V_full_n),
    .if_write(d1_V_write),
    .if_dout(d1_V_dout),
    .if_empty_n(d1_V_empty_n),
    .if_read(d1_V_read)
);

fifo_w16_d10_A c2_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_dense_strm_core_2_fu_263_c_V_din),
    .if_full_n(c2_V_full_n),
    .if_write(c2_V_write),
    .if_dout(c2_V_dout),
    .if_empty_n(c2_V_empty_n),
    .if_read(c2_V_read)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_a_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_V_TDATA),
    .vld_in(a_V_TVALID),
    .ack_in(regslice_both_a_V_U_ack_in),
    .data_out(a_V_TDATA_int),
    .vld_out(a_V_TVALID_int),
    .ack_out(a_V_TREADY_int),
    .apdone_blk(regslice_both_a_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_z_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_argmax_strm_core_fu_283_b_V_TDATA),
    .vld_in(grp_argmax_strm_core_fu_283_b_V_TVALID),
    .ack_in(z_V_TREADY_int),
    .data_out(z_V_TDATA),
    .vld_out(regslice_both_z_V_U_vld_out),
    .ack_out(z_V_TREADY),
    .apdone_blk(regslice_both_z_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_argmax_strm_core_fu_283_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_argmax_strm_core_fu_283_ap_start_reg <= 1'b1;
        end else if ((grp_argmax_strm_core_fu_283_ap_ready == 1'b1)) begin
            grp_argmax_strm_core_fu_283_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dense_strm_core_1_fu_273_ap_start_reg <= 1'b0;
    end else begin
        if ((~((icmp_ln46_fu_290_p2 == 1'd0) & (c0_V_empty_n == 1'b0)) & (icmp_ln46_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_dense_strm_core_1_fu_273_ap_start_reg <= 1'b1;
        end else if ((grp_dense_strm_core_1_fu_273_ap_ready == 1'b1)) begin
            grp_dense_strm_core_1_fu_273_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dense_strm_core_2_fu_263_ap_start_reg <= 1'b0;
    end else begin
        if ((~((icmp_ln46_1_fu_390_p2 == 1'd0) & (c1_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln46_1_fu_390_p2 == 1'd1))) begin
            grp_dense_strm_core_2_fu_263_ap_start_reg <= 1'b1;
        end else if ((grp_dense_strm_core_2_fu_263_ap_ready == 1'b1)) begin
            grp_dense_strm_core_2_fu_263_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dense_strm_core_fu_252_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_dense_strm_core_fu_252_ap_start_reg <= 1'b1;
        end else if ((grp_dense_strm_core_fu_252_ap_ready == 1'b1)) begin
            grp_dense_strm_core_fu_252_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((d1_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_0_i2_reg_241 <= i_1_reg_536;
    end else if (((1'b1 == ap_CS_fsm_state6) & (grp_dense_strm_core_1_fu_273_ap_done == 1'b1))) begin
        i_0_i2_reg_241 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (d0_V_full_n == 1'b1))) begin
        i_0_i_reg_230 <= i_reg_523;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_dense_strm_core_fu_252_ap_done == 1'b1))) begin
        i_0_i_reg_230 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln46_1_fu_390_p2 == 1'd0) & (c1_V_empty_n == 1'b0)) & (icmp_ln46_1_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        clip_v_1_reg_541 <= clip_v_1_fu_482_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln46_fu_290_p2 == 1'd0) & (c0_V_empty_n == 1'b0)) & (icmp_ln46_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        clip_v_reg_528 <= clip_v_fu_382_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln46_1_fu_390_p2 == 1'd0) & (c1_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        i_1_reg_536 <= i_1_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln46_fu_290_p2 == 1'd0) & (c0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_523 <= i_fu_296_p2;
    end
end

always @ (*) begin
    if (((regslice_both_a_V_U_ack_in == 1'b1) & (1'b1 == a_V_TVALID))) begin
        a_V_TREADY = 1'b1;
    end else begin
        a_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_V_TREADY_int = grp_dense_strm_core_fu_252_a_V_TREADY;
    end else begin
        a_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_z_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_z_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln46_fu_290_p2 == 1'd0) & (c0_V_empty_n == 1'b0)) & (icmp_ln46_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        c0_V_read = 1'b1;
    end else begin
        c0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c0_V_write = grp_dense_strm_core_fu_252_c_V_write;
    end else begin
        c0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln46_1_fu_390_p2 == 1'd0) & (c1_V_empty_n == 1'b0)) & (icmp_ln46_1_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        c1_V_read = 1'b1;
    end else begin
        c1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c1_V_write = grp_dense_strm_core_1_fu_273_c_V_write;
    end else begin
        c1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c2_V_read = grp_argmax_strm_core_fu_283_a_V_read;
    end else begin
        c2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c2_V_write = grp_dense_strm_core_2_fu_263_c_V_write;
    end else begin
        c2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        d0_V_read = grp_dense_strm_core_1_fu_273_a_V_read;
    end else begin
        d0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (d0_V_full_n == 1'b1))) begin
        d0_V_write = 1'b1;
    end else begin
        d0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        d1_V_read = grp_dense_strm_core_2_fu_263_a_V_read;
    end else begin
        d1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((d1_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        d1_V_write = 1'b1;
    end else begin
        d1_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_dense_strm_core_fu_252_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln46_fu_290_p2 == 1'd0) & (c0_V_empty_n == 1'b0)) & (icmp_ln46_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((icmp_ln46_fu_290_p2 == 1'd0) & (c0_V_empty_n == 1'b0)) & (icmp_ln46_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (d0_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_dense_strm_core_1_fu_273_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((icmp_ln46_1_fu_390_p2 == 1'd0) & (c1_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln46_1_fu_390_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((icmp_ln46_1_fu_390_p2 == 1'd0) & (c1_V_empty_n == 1'b0)) & (icmp_ln46_1_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((d1_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_dense_strm_core_2_fu_263_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_argmax_strm_core_fu_283_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((regslice_both_z_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln48_1_fu_426_p2 = ($signed(15'd128) + $signed(sext_ln48_1_fu_412_p1));

assign add_ln48_fu_326_p2 = ($signed(15'd128) + $signed(sext_ln48_fu_312_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state4 = ((icmp_ln46_fu_290_p2 == 1'd0) & (c0_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_ignore_call0 = ((icmp_ln46_fu_290_p2 == 1'd0) & (c0_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((icmp_ln46_1_fu_390_p2 == 1'd0) & (c1_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_ignore_call0 = ((icmp_ln46_1_fu_390_p2 == 1'd0) & (c1_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign clip_v_1_fu_482_p3 = ((or_ln19_1_fu_476_p2[0:0] === 1'b1) ? select_ln19_2_fu_468_p3 : xor_ln24_1_fu_456_p2);

assign clip_v_fu_382_p3 = ((or_ln19_fu_376_p2[0:0] === 1'b1) ? select_ln19_fu_368_p3 : xor_ln24_fu_356_p2);

assign grp_argmax_strm_core_fu_283_ap_start = grp_argmax_strm_core_fu_283_ap_start_reg;

assign grp_argmax_strm_core_fu_283_b_V_TREADY = (z_V_TREADY_int & ap_CS_fsm_state11);

assign grp_dense_strm_core_1_fu_273_ap_start = grp_dense_strm_core_1_fu_273_ap_start_reg;

assign grp_dense_strm_core_2_fu_263_ap_start = grp_dense_strm_core_2_fu_263_ap_start_reg;

assign grp_dense_strm_core_fu_252_ap_start = grp_dense_strm_core_fu_252_ap_start_reg;

assign i_1_fu_396_p2 = (i_0_i2_reg_241 + 7'd1);

assign i_fu_296_p2 = (i_0_i_reg_230 + 6'd1);

assign icmp_ln21_1_fu_450_p2 = (($signed(tmp_5_fu_440_p4) > $signed(7'd0)) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_350_p2 = (($signed(tmp_1_fu_340_p4) > $signed(7'd0)) ? 1'b1 : 1'b0);

assign icmp_ln46_1_fu_390_p2 = ((i_0_i2_reg_241 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_290_p2 = ((i_0_i_reg_230 == 6'd50) ? 1'b1 : 1'b0);

assign or_ln19_1_fu_476_p2 = (tmp_4_fu_432_p3 | icmp_ln21_1_fu_450_p2);

assign or_ln19_fu_376_p2 = (tmp_fu_332_p3 | icmp_ln21_fu_350_p2);

assign select_ln19_2_fu_468_p3 = ((xor_ln19_1_fu_462_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln19_fu_368_p3 = ((xor_ln19_fu_362_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign sext_ln48_1_fu_412_p1 = $signed(trunc_ln48_2_fu_402_p4);

assign sext_ln48_fu_312_p1 = $signed(trunc_ln_fu_302_p4);

assign tmp_1_fu_340_p4 = {{add_ln48_fu_326_p2[14:8]}};

assign tmp_4_fu_432_p3 = add_ln48_1_fu_426_p2[32'd14];

assign tmp_5_fu_440_p4 = {{add_ln48_1_fu_426_p2[14:8]}};

assign tmp_fu_332_p3 = add_ln48_fu_326_p2[32'd14];

assign trunc_ln48_1_fu_316_p4 = {{c0_V_dout[9:2]}};

assign trunc_ln48_2_fu_402_p4 = {{c1_V_dout[15:2]}};

assign trunc_ln48_3_fu_416_p4 = {{c1_V_dout[9:2]}};

assign trunc_ln_fu_302_p4 = {{c0_V_dout[15:2]}};

assign xor_ln19_1_fu_462_p2 = (tmp_4_fu_432_p3 ^ 1'd1);

assign xor_ln19_fu_362_p2 = (tmp_fu_332_p3 ^ 1'd1);

assign xor_ln24_1_fu_456_p2 = (trunc_ln48_3_fu_416_p4 ^ 8'd128);

assign xor_ln24_fu_356_p2 = (trunc_ln48_1_fu_316_p4 ^ 8'd128);

assign z_V_TVALID = regslice_both_z_V_U_vld_out;

endmodule //nn
