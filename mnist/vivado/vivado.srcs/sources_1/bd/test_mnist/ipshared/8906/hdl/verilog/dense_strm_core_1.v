// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_strm_core_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V_dout,
        a_V_empty_n,
        a_V_read,
        c_V_din,
        c_V_full_n,
        c_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state10 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] a_V_dout;
input   a_V_empty_n;
output   a_V_read;
output  [15:0] c_V_din;
input   c_V_full_n;
output   c_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_V_read;
reg c_V_write;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] b2_address0;
reg    b2_ce0;
wire   [5:0] b2_q0;
wire   [12:0] W2_address0;
reg    W2_ce0;
wire   [7:0] W2_q0;
reg    a_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln48_reg_362;
reg    c_V_blk_n;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln56_2_reg_409;
reg   [0:0] icmp_ln56_2_reg_409_pp1_iter3_reg;
reg   [5:0] i_0_reg_165;
reg   [12:0] indvar_flatten_reg_177;
reg   [6:0] i1_0_reg_188;
reg   [21:0] t_0_reg_199;
reg   [5:0] k_0_reg_211;
wire   [0:0] icmp_ln48_fu_222_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] i_fu_228_p2;
reg   [5:0] i_reg_366;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln53_fu_239_p2;
reg   [0:0] icmp_ln53_reg_371;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
wire    ap_block_state8_pp1_stage0_iter3;
reg    ap_block_state9_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln53_reg_371_pp1_iter1_reg;
reg   [0:0] icmp_ln53_reg_371_pp1_iter2_reg;
reg   [0:0] icmp_ln53_reg_371_pp1_iter3_reg;
wire   [12:0] add_ln53_fu_245_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln56_fu_257_p2;
reg   [0:0] icmp_ln56_reg_380;
reg   [0:0] icmp_ln56_reg_380_pp1_iter1_reg;
reg   [0:0] icmp_ln56_reg_380_pp1_iter2_reg;
wire   [5:0] select_ln58_3_fu_263_p3;
reg   [5:0] select_ln58_3_reg_385;
reg   [5:0] select_ln58_3_reg_385_pp1_iter1_reg;
wire   [6:0] select_ln58_4_fu_271_p3;
reg   [6:0] select_ln58_4_reg_391;
wire   [5:0] k_fu_279_p2;
reg   [5:0] k_reg_398;
wire   [0:0] icmp_ln56_2_fu_299_p2;
reg   [0:0] icmp_ln56_2_reg_409_pp1_iter2_reg;
reg  signed [7:0] W2_load_reg_423;
reg   [5:0] b2_load_reg_428;
reg   [5:0] b2_load_reg_428_pp1_iter3_reg;
wire  signed [21:0] grp_fu_354_p3;
reg  signed [21:0] t_reg_433;
reg    ap_enable_reg_pp1_iter3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg   [5:0] buf_address0;
reg    buf_ce0;
reg    buf_we0;
wire   [7:0] buf_q0;
reg   [5:0] ap_phi_mux_i_0_phi_fu_169_p4;
reg   [6:0] ap_phi_mux_i1_0_phi_fu_192_p4;
reg   [21:0] ap_phi_mux_t_0_phi_fu_203_p4;
reg   [5:0] ap_phi_mux_k_0_phi_fu_215_p4;
wire   [63:0] zext_ln50_fu_234_p1;
wire   [63:0] zext_ln58_7_fu_295_p1;
wire   [63:0] zext_ln58_fu_285_p1;
wire   [63:0] zext_ln58_3_fu_304_p1;
reg    ap_block_pp1_stage0_01001;
wire   [6:0] i_3_fu_251_p2;
wire   [12:0] grp_fu_345_p3;
wire   [14:0] trunc_ln_fu_322_p4;
wire  signed [15:0] sext_ln61_1_fu_331_p1;
wire  signed [15:0] sext_ln61_fu_335_p1;
wire   [5:0] grp_fu_345_p0;
wire   [7:0] grp_fu_345_p1;
wire   [6:0] grp_fu_345_p2;
wire   [7:0] grp_fu_354_p1;
wire   [21:0] grp_fu_354_p2;
wire    ap_CS_fsm_state10;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [12:0] grp_fu_345_p00;
wire   [12:0] grp_fu_345_p20;
wire   [15:0] grp_fu_354_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

dense_strm_core_1cud #(
    .DataWidth( 6 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
b2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b2_address0),
    .ce0(b2_ce0),
    .q0(b2_q0)
);

dense_strm_core_1dEe #(
    .DataWidth( 8 ),
    .AddressRange( 5000 ),
    .AddressWidth( 13 ))
W2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W2_address0),
    .ce0(W2_ce0),
    .q0(W2_q0)
);

dense_strm_core_1eOg #(
    .DataWidth( 8 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_address0),
    .ce0(buf_ce0),
    .we0(buf_we0),
    .d0(a_V_dout),
    .q0(buf_q0)
);

nn_mac_muladd_6nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 13 ))
nn_mac_muladd_6nsfYi_U8(
    .din0(grp_fu_345_p0),
    .din1(grp_fu_345_p1),
    .din2(grp_fu_345_p2),
    .dout(grp_fu_345_p3)
);

nn_mac_muladd_8s_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
nn_mac_muladd_8s_g8j_U9(
    .din0(W2_load_reg_423),
    .din1(grp_fu_354_p1),
    .din2(grp_fu_354_p2),
    .dout(grp_fu_354_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state5)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_188 <= 7'd0;
    end else if (((icmp_ln53_reg_371 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i1_0_reg_188 <= select_ln58_4_reg_391;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln48_reg_362 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_165 <= i_reg_366;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_165 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_177 <= 13'd0;
    end else if (((icmp_ln53_fu_239_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten_reg_177 <= add_ln53_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_0_reg_211 <= 6'd0;
    end else if (((icmp_ln53_reg_371 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        k_0_reg_211 <= k_reg_398;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_0_reg_199 <= 22'd0;
    end else if (((icmp_ln53_reg_371_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t_0_reg_199 <= t_reg_433;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_reg_371_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        W2_load_reg_423 <= W2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_2_reg_409 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b2_load_reg_428 <= b2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        b2_load_reg_428_pp1_iter3_reg <= b2_load_reg_428;
        icmp_ln53_reg_371_pp1_iter2_reg <= icmp_ln53_reg_371_pp1_iter1_reg;
        icmp_ln53_reg_371_pp1_iter3_reg <= icmp_ln53_reg_371_pp1_iter2_reg;
        icmp_ln56_2_reg_409_pp1_iter2_reg <= icmp_ln56_2_reg_409;
        icmp_ln56_2_reg_409_pp1_iter3_reg <= icmp_ln56_2_reg_409_pp1_iter2_reg;
        icmp_ln56_reg_380_pp1_iter2_reg <= icmp_ln56_reg_380_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_366 <= i_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln48_reg_362 <= icmp_ln48_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln53_reg_371 <= icmp_ln53_fu_239_p2;
        icmp_ln53_reg_371_pp1_iter1_reg <= icmp_ln53_reg_371;
        icmp_ln56_reg_380_pp1_iter1_reg <= icmp_ln56_reg_380;
        select_ln58_3_reg_385_pp1_iter1_reg <= select_ln58_3_reg_385;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_reg_371 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln56_2_reg_409 <= icmp_ln56_2_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln56_reg_380 <= icmp_ln56_fu_257_p2;
        select_ln58_3_reg_385 <= select_ln58_3_fu_263_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_239_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        k_reg_398 <= k_fu_279_p2;
        select_ln58_4_reg_391 <= select_ln58_4_fu_271_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_reg_371_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t_reg_433 <= grp_fu_354_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        W2_ce0 = 1'b1;
    end else begin
        W2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_362 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_V_blk_n = a_V_empty_n;
    end else begin
        a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln48_reg_362 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_V_read = 1'b1;
    end else begin
        a_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln48_fu_222_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln53_fu_239_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln53_reg_371 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i1_0_phi_fu_192_p4 = select_ln58_4_reg_391;
    end else begin
        ap_phi_mux_i1_0_phi_fu_192_p4 = i1_0_reg_188;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_362 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_169_p4 = i_reg_366;
    end else begin
        ap_phi_mux_i_0_phi_fu_169_p4 = i_0_reg_165;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln53_reg_371 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_k_0_phi_fu_215_p4 = k_reg_398;
    end else begin
        ap_phi_mux_k_0_phi_fu_215_p4 = k_0_reg_211;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln53_reg_371_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ap_phi_mux_t_0_phi_fu_203_p4 = t_reg_433;
    end else begin
        ap_phi_mux_t_0_phi_fu_203_p4 = t_0_reg_199;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b2_ce0 = 1'b1;
    end else begin
        b2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buf_address0 = zext_ln58_3_fu_304_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_address0 = zext_ln50_fu_234_p1;
    end else begin
        buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        buf_ce0 = 1'b1;
    end else begin
        buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln48_reg_362 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_we0 = 1'b1;
    end else begin
        buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_2_reg_409_pp1_iter3_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        c_V_blk_n = c_V_full_n;
    end else begin
        c_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln56_2_reg_409_pp1_iter3_reg == 1'd1) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        c_V_write = 1'b1;
    end else begin
        c_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln48_fu_222_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln48_fu_222_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln53_fu_239_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)) | ((icmp_ln53_fu_239_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W2_address0 = zext_ln58_7_fu_295_p1;

assign add_ln53_fu_245_p2 = (indvar_flatten_reg_177 + 13'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln48_reg_362 == 1'd0) & (1'b0 == a_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln48_reg_362 == 1'd0) & (1'b0 == a_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((icmp_ln56_2_reg_409_pp1_iter3_reg == 1'd1) & (c_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln56_2_reg_409_pp1_iter3_reg == 1'd1) & (c_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln56_2_reg_409_pp1_iter3_reg == 1'd1) & (c_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln48_reg_362 == 1'd0) & (1'b0 == a_V_empty_n));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp1_stage0_iter4 = ((icmp_ln56_2_reg_409_pp1_iter3_reg == 1'd1) & (c_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign b2_address0 = zext_ln58_fu_285_p1;

assign c_V_din = ($signed(sext_ln61_1_fu_331_p1) + $signed(sext_ln61_fu_335_p1));

assign grp_fu_345_p0 = grp_fu_345_p00;

assign grp_fu_345_p00 = select_ln58_3_reg_385;

assign grp_fu_345_p1 = 13'd100;

assign grp_fu_345_p2 = grp_fu_345_p20;

assign grp_fu_345_p20 = select_ln58_4_reg_391;

assign grp_fu_354_p1 = grp_fu_354_p10;

assign grp_fu_354_p10 = buf_q0;

assign grp_fu_354_p2 = ((icmp_ln56_reg_380_pp1_iter2_reg[0:0] === 1'b1) ? 22'd0 : ap_phi_mux_t_0_phi_fu_203_p4);

assign i_3_fu_251_p2 = (ap_phi_mux_i1_0_phi_fu_192_p4 + 7'd1);

assign i_fu_228_p2 = (ap_phi_mux_i_0_phi_fu_169_p4 + 6'd1);

assign icmp_ln48_fu_222_p2 = ((ap_phi_mux_i_0_phi_fu_169_p4 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_239_p2 = ((indvar_flatten_reg_177 == 13'd5000) ? 1'b1 : 1'b0);

assign icmp_ln56_2_fu_299_p2 = ((k_reg_398 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_257_p2 = ((ap_phi_mux_k_0_phi_fu_215_p4 == 6'd50) ? 1'b1 : 1'b0);

assign k_fu_279_p2 = (select_ln58_3_fu_263_p3 + 6'd1);

assign select_ln58_3_fu_263_p3 = ((icmp_ln56_fu_257_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_k_0_phi_fu_215_p4);

assign select_ln58_4_fu_271_p3 = ((icmp_ln56_fu_257_p2[0:0] === 1'b1) ? i_3_fu_251_p2 : ap_phi_mux_i1_0_phi_fu_192_p4);

assign sext_ln61_1_fu_331_p1 = $signed(trunc_ln_fu_322_p4);

assign sext_ln61_fu_335_p1 = $signed(b2_load_reg_428_pp1_iter3_reg);

assign trunc_ln_fu_322_p4 = {{t_reg_433[21:7]}};

assign zext_ln50_fu_234_p1 = i_0_reg_165;

assign zext_ln58_3_fu_304_p1 = select_ln58_3_reg_385_pp1_iter1_reg;

assign zext_ln58_7_fu_295_p1 = grp_fu_345_p3;

assign zext_ln58_fu_285_p1 = select_ln58_4_reg_391;

endmodule //dense_strm_core_1
