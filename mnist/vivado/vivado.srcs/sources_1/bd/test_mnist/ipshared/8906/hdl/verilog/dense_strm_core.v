// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_strm_core (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V_TDATA,
        a_V_TVALID,
        a_V_TREADY,
        c_V_din,
        c_V_full_n,
        c_V_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state8 = 8'd32;
parameter    ap_ST_fsm_state9 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] a_V_TDATA;
input   a_V_TVALID;
output   a_V_TREADY;
output  [15:0] c_V_din;
input   c_V_full_n;
output   c_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_V_TREADY;
reg c_V_write;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] W1_address0;
reg    W1_ce0;
wire   [6:0] W1_q0;
wire   [5:0] b1_address0;
reg    b1_ce0;
wire   [6:0] b1_q0;
reg    a_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln48_fu_213_p2;
reg    c_V_blk_n;
wire    ap_CS_fsm_state10;
reg   [24:0] t_0_reg_179;
reg   [9:0] k_0_reg_191;
reg   [15:0] phi_mul_reg_202;
wire   [9:0] i_fu_219_p2;
reg    ap_block_state2;
wire   [0:0] icmp_ln53_fu_230_p2;
wire    ap_CS_fsm_state4;
wire   [5:0] i_4_fu_236_p2;
reg   [5:0] i_4_reg_329;
wire   [63:0] zext_ln58_fu_242_p1;
reg   [63:0] zext_ln58_reg_334;
wire   [15:0] zext_ln56_fu_246_p1;
reg   [15:0] zext_ln56_reg_339;
wire   [0:0] icmp_ln56_fu_250_p2;
reg   [0:0] icmp_ln56_reg_344;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln56_reg_344_pp1_iter1_reg;
wire   [9:0] k_fu_256_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [15:0] add_ln58_4_fu_267_p2;
wire   [7:0] buf_q0;
reg   [7:0] buf_load_reg_368;
reg    ap_enable_reg_pp1_iter1;
reg  signed [6:0] W1_load_reg_373;
wire  signed [24:0] grp_fu_309_p3;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state8;
wire   [15:0] v_fu_303_p2;
reg   [15:0] v_reg_388;
wire    ap_CS_fsm_state9;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg   [9:0] buf_address0;
reg    buf_ce0;
reg    buf_we0;
reg   [9:0] i_0_reg_157;
reg   [5:0] i1_0_reg_168;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln50_fu_225_p1;
wire   [63:0] zext_ln58_8_fu_278_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln58_1_fu_262_p1;
wire   [15:0] add_ln58_fu_273_p2;
wire  signed [15:0] sext_ln61_fu_299_p1;
wire   [15:0] trunc_ln_fu_289_p4;
wire   [7:0] grp_fu_309_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [14:0] grp_fu_309_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

dense_strm_core_W1 #(
    .DataWidth( 7 ),
    .AddressRange( 39200 ),
    .AddressWidth( 16 ))
W1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W1_address0),
    .ce0(W1_ce0),
    .q0(W1_q0)
);

dense_strm_core_b1 #(
    .DataWidth( 7 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
b1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b1_address0),
    .ce0(b1_ce0),
    .q0(b1_q0)
);

dense_strm_core_buf #(
    .DataWidth( 8 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_address0),
    .ce0(buf_ce0),
    .we0(buf_we0),
    .d0(a_V_TDATA),
    .q0(buf_q0)
);

nn_mac_muladd_7s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 25 ),
    .dout_WIDTH( 25 ))
nn_mac_muladd_7s_bkb_U1(
    .din0(W1_load_reg_373),
    .din1(grp_fu_309_p1),
    .din2(t_0_reg_179),
    .dout(grp_fu_309_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln53_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state5)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((icmp_ln53_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_0_reg_168 <= 6'd0;
    end else if (((c_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        i1_0_reg_168 <= i_4_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln48_fu_213_p2 == 1'd0) & (1'b0 == a_V_TVALID)) & (icmp_ln48_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_157 <= i_fu_219_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_157 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        k_0_reg_191 <= k_fu_256_p2;
    end else if (((icmp_ln53_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_reg_191 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        phi_mul_reg_202 <= add_ln58_4_fu_267_p2;
    end else if (((icmp_ln53_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_202 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_reg_344_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t_0_reg_179 <= grp_fu_309_p3;
    end else if (((icmp_ln53_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t_0_reg_179 <= 25'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_reg_344 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        W1_load_reg_373 <= W1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_reg_344 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        buf_load_reg_368 <= buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_4_reg_329 <= i_4_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln56_reg_344 <= icmp_ln56_fu_250_p2;
        icmp_ln56_reg_344_pp1_iter1_reg <= icmp_ln56_reg_344;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        v_reg_388 <= v_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln56_reg_339[5 : 0] <= zext_ln56_fu_246_p1[5 : 0];
        zext_ln58_reg_334[5 : 0] <= zext_ln58_fu_242_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        W1_ce0 = 1'b1;
    end else begin
        W1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_V_TDATA_blk_n = a_V_TVALID;
    end else begin
        a_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln48_fu_213_p2 == 1'd0) & (1'b0 == a_V_TVALID)) & (icmp_ln48_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_V_TREADY = 1'b1;
    end else begin
        a_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln56_fu_250_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln53_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln53_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        b1_ce0 = 1'b1;
    end else begin
        b1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        buf_address0 = zext_ln58_1_fu_262_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_address0 = zext_ln50_fu_225_p1;
    end else begin
        buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | (~((icmp_ln48_fu_213_p2 == 1'd0) & (1'b0 == a_V_TVALID)) & (1'b1 == ap_CS_fsm_state2)))) begin
        buf_ce0 = 1'b1;
    end else begin
        buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln48_fu_213_p2 == 1'd0) & (1'b0 == a_V_TVALID)) & (icmp_ln48_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        buf_we0 = 1'b1;
    end else begin
        buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_V_blk_n = c_V_full_n;
    end else begin
        c_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((c_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        c_V_write = 1'b1;
    end else begin
        c_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln48_fu_213_p2 == 1'd0) & (1'b0 == a_V_TVALID)) & (icmp_ln48_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln48_fu_213_p2 == 1'd0) & (1'b0 == a_V_TVALID)) & (icmp_ln48_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln53_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln56_fu_250_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((icmp_ln56_fu_250_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((c_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W1_address0 = zext_ln58_8_fu_278_p1;

assign add_ln58_4_fu_267_p2 = (phi_mul_reg_202 + 16'd50);

assign add_ln58_fu_273_p2 = (phi_mul_reg_202 + zext_ln56_reg_339);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((icmp_ln48_fu_213_p2 == 1'd0) & (1'b0 == a_V_TVALID));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign b1_address0 = zext_ln58_reg_334;

assign c_V_din = v_reg_388;

assign grp_fu_309_p1 = grp_fu_309_p10;

assign grp_fu_309_p10 = buf_load_reg_368;

assign i_4_fu_236_p2 = (i1_0_reg_168 + 6'd1);

assign i_fu_219_p2 = (i_0_reg_157 + 10'd1);

assign icmp_ln48_fu_213_p2 = ((i_0_reg_157 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_230_p2 = ((i1_0_reg_168 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_250_p2 = ((k_0_reg_191 == 10'd784) ? 1'b1 : 1'b0);

assign k_fu_256_p2 = (k_0_reg_191 + 10'd1);

assign sext_ln61_fu_299_p1 = $signed(b1_q0);

assign trunc_ln_fu_289_p4 = {{t_0_reg_179[22:7]}};

assign v_fu_303_p2 = ($signed(sext_ln61_fu_299_p1) + $signed(trunc_ln_fu_289_p4));

assign zext_ln50_fu_225_p1 = i_0_reg_157;

assign zext_ln56_fu_246_p1 = i1_0_reg_168;

assign zext_ln58_1_fu_262_p1 = k_0_reg_191;

assign zext_ln58_8_fu_278_p1 = add_ln58_fu_273_p2;

assign zext_ln58_fu_242_p1 = i1_0_reg_168;

always @ (posedge ap_clk) begin
    zext_ln58_reg_334[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_339[15:6] <= 10'b0000000000;
end

endmodule //dense_strm_core
