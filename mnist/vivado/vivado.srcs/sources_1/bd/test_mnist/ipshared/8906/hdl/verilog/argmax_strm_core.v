// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module argmax_strm_core (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V_dout,
        a_V_empty_n,
        a_V_read,
        b_V_TDATA,
        b_V_TVALID,
        b_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] a_V_dout;
input   a_V_empty_n;
output   a_V_read;
output  [7:0] b_V_TDATA;
output   b_V_TVALID;
input   b_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_V_read;
reg b_V_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    a_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln11_fu_96_p2;
reg    b_V_TDATA_blk_n;
wire   [0:0] icmp_ln18_fu_141_p2;
wire   [3:0] i_fu_102_p2;
reg   [3:0] i_reg_173;
reg    ap_block_state2;
reg    ap_predicate_op26_write_state2;
reg    ap_block_state2_io;
wire   [7:0] tmp_14_fu_124_p3;
reg   [7:0] tmp_14_reg_178;
reg   [0:0] icmp_ln18_reg_183;
reg   [3:0] i_0_reg_75;
wire    ap_CS_fsm_state3;
reg   [15:0] max_0_fu_54;
wire   [15:0] select_ln13_1_fu_133_p3;
reg   [7:0] tmp_fu_58;
wire   [0:0] icmp_ln13_fu_114_p2;
wire   [7:0] max_index_fu_120_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_75 <= i_reg_173;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_75 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln11_fu_96_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln18_fu_141_p2 == 1'd0) & (icmp_ln11_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        max_0_fu_54 <= select_ln13_1_fu_133_p3;
    end else if (((~((1'b1 == ap_block_state2_io) | ((icmp_ln11_fu_96_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln18_fu_141_p2 == 1'd1) & (icmp_ln11_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        max_0_fu_54 <= 16'd65281;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_183 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_fu_58 <= tmp_14_reg_178;
    end else if (((~((1'b1 == ap_block_state2_io) | ((icmp_ln11_fu_96_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln18_fu_141_p2 == 1'd1) & (icmp_ln11_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp_fu_58 <= 8'd255;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln11_fu_96_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_173 <= i_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln11_fu_96_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln11_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln18_reg_183 <= icmp_ln18_fu_141_p2;
        tmp_14_reg_178 <= tmp_14_fu_124_p3;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_V_blk_n = a_V_empty_n;
    end else begin
        a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln11_fu_96_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln11_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_V_read = 1'b1;
    end else begin
        a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((icmp_ln11_fu_96_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln11_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln11_fu_96_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln11_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_141_p2 == 1'd1) & (icmp_ln11_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_V_TDATA_blk_n = b_V_TREADY;
    end else begin
        b_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln11_fu_96_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op26_write_state2 == 1'b1))) begin
        b_V_TVALID = 1'b1;
    end else begin
        b_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln11_fu_96_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln11_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln11_fu_96_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln11_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state2 = ((icmp_ln11_fu_96_p2 == 1'd0) & (1'b0 == a_V_empty_n));
end

always @ (*) begin
    ap_block_state2_io = ((b_V_TREADY == 1'b0) & (ap_predicate_op26_write_state2 == 1'b1));
end

always @ (*) begin
    ap_predicate_op26_write_state2 = ((icmp_ln18_fu_141_p2 == 1'd1) & (icmp_ln11_fu_96_p2 == 1'd0));
end

assign b_V_TDATA = ((icmp_ln13_fu_114_p2[0:0] === 1'b1) ? max_index_fu_120_p1 : tmp_fu_58);

assign i_fu_102_p2 = (i_0_reg_75 + 4'd1);

assign icmp_ln11_fu_96_p2 = ((i_0_reg_75 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_114_p2 = (($signed(max_0_fu_54) < $signed(a_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_141_p2 = ((i_0_reg_75 == 4'd9) ? 1'b1 : 1'b0);

assign max_index_fu_120_p1 = i_0_reg_75;

assign select_ln13_1_fu_133_p3 = ((icmp_ln13_fu_114_p2[0:0] === 1'b1) ? a_V_dout : max_0_fu_54);

assign tmp_14_fu_124_p3 = ((icmp_ln13_fu_114_p2[0:0] === 1'b1) ? max_index_fu_120_p1 : tmp_fu_58);

endmodule //argmax_strm_core
